name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Configuração do Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache de pacotes npm
      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Instalação de dependências
      - name: Install Dependencies
        run: npm ci

      # Iniciar o servidor da aplicação
      - name: Start Application Server
        run: npm run dev &
        env:
          PORT: 5173
        timeout-minutes: 1 # Aguarda 1 minuto para o servidor subir

      # Verificar se o servidor está rodando antes de continuar
      - name: Wait for Server to be Ready
        run: |
          npx wait-on http://localhost:5173

      # Executar testes Cypress
      - name: Run Cypress Tests
        run: |
          mkdir -p test-results/cypress
          npx cypress run 
        env:
          CI: true

      # Análise com o SonarQube
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=robotics-lab-system-frontend-Two
            -Dsonar.sources=src
            -Dsonar.typescript.tsconfigPath=tsconfig.json

      # Verificação do Quality Gate
      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Build da aplicação
      - name: Build Application
        run: npm run build

      # Build da imagem Docker
      - name: Build Docker Image
        run: |
          docker build -t vite-typescript-app:latest .
          docker save vite-typescript-app:latest -o vite-typescript-app.tar

      # Deploy para Produção
      - name: Deploy to Production
        if: success()
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_PASSWORD: ${{ secrets.PROD_PASSWORD }}
        run: |
          sshpass -p "$PROD_PASSWORD" scp -o StrictHostKeyChecking=no vite-typescript-app.tar $PROD_USER@$PROD_HOST:/tmp
          sshpass -p "$PROD_PASSWORD" ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "docker load -i /tmp/vite-typescript-app.tar && rm /tmp/vite-typescript-app.tar && docker image prune -f && cd /home/$PROD_USER/projeto-tcc && docker-compose up -d $PROD_IMAGE_NAME"
